Essay: A Simple Parcel Management System Using Deque and Linked List
Managing parcels effectively is important in logistics, where fast delivery and accurate tracking are key. This project introduces a simple parcel management system using two common data structures: deque (double-ended queue) and linked list. The system shows how these structures can help handle parcel data in a flexible and efficient way. This essay explains the project's goals, importance, relevance, and how it works.
Goals The main goal of this project is to create a system that can easily add, remove, and view parcels using:
1.	Deque-based system: This allows adding or removing parcels from both the front and rear.
2.	Linked list-based system: This handles parcels in a sequential order with efficient memory use.
Other goals include:
•	Showing how a deque can handle operations at both ends quickly.
•	Demonstrating how a linked list can manage data in a simple, flexible way.
•	Providing a user-friendly system for parcel management.
Importance Parcel management systems are essential in logistics, e-commerce, and delivery services. An efficient system can speed up deliveries, improve customer satisfaction, and reduce costs. This project shows how basic data structures can solve real-world problems.
1.	Why use a deque? A deque lets you add or remove parcels from either end, making it useful for priority handling.
2.	Why use a linked list? Linked lists are helpful when you need a system that can grow or shrink without wasting memory.
Relevance This project is very relevant today, especially with the growth of online shopping and the need for fast deliveries. It can be adapted for use in warehouses, sorting centers, and delivery hubs.
It is also relevant in computer science education. Students can learn how to apply data structures like queues and linked lists to real-world problems.
How the System Works
1.	Deque-based System The system uses Python's collections.deque module, which is great for creating double-ended queues.
o	Adding Parcels: You can add parcels at the back with add_parcel_rear or at the front with add_parcel_front.
o	Removing Parcels: You can remove parcels from the back with remove_parcel_rear or from the front with remove_parcel_front.
o	Viewing Parcels: The view_parcels function shows the current parcels.
o	Extra Functions: It also has is_empty to check if there are any parcels and parcel_count to count them.
2.	Linked List-based System This system manually creates a linked list using Python. Each parcel is a node with two parts: id (parcel ID) and next (the next parcel).
o	Adding Parcels: The add_parcel_linked_list function adds parcels one after another.
o	Removing Parcels: The remove_parcel_linked_list function removes parcels from the start.
o	Viewing Parcels: The view_parcels_linked_list function shows all parcels in order.
Comparison of Deque and Linked List
•	Speed: The deque is faster when adding or removing parcels from both ends. The linked list takes longer because it handles data one step at a time.
•	Memory: The linked list uses memory more efficiently because it only stores what is needed.
•	Best Use: Use a deque when you need to add or remove parcels quickly from both ends. Use a linked list when you need to process parcels in order.
As Conclusion This project shows how deque and linked list data structures can be used to build a simple, effective parcel management system. By using both methods, it highlights their strengths and weaknesses in different situations. The system can be improved further by adding a database for storage, a graphical interface, and more features like sorting and searching parcels.
Overall, this project helps in understanding how basic computer science ideas can solve everyday problems in logistics and delivery services.

